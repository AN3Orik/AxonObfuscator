-- ROT13 ciphering algorithm implementation
-- See: http://en.wikipedia.org/wiki/ROT13

-- Returns the ASCII bytecode of either 'a' or 'A'
local function ascii_base(s)
  return s:lower() == s and ('a'):byte() or ('A'):byte()
end

-- ROT13 is based on Caesar ciphering algorithm, using 13 as a key
local function caesar_cipher(str, key)
  return (str:gsub('%a', function(s)
    local base = ascii_base(s)
    return string.char(((s:byte() - base + key) % 26) + base)
  end))
end

-- str     : a string to be ciphered
-- returns : the ciphered string
local function rot13_cipher(str)
  return caesar_cipher(str, 13)
end

-- str     : a string to be deciphered
-- returns : the deciphered string
local function rot13_decipher(str)
  return caesar_cipher(str, -13)
end


local AxonStringsCache = {}
local BitWise = {}

local instrDebug = -1;


local aaa = string.sub
local aaabbb = string.byte
local ulololo = string.find

local s = "luraph bad"
local BitShiftLeft = function(integer, count)
	return integer * (2 ^ count);
end

local ShiftRight = function  (integer, count)
	return math.floor(integer / (2 ^ count))
end

local GetBits = function  (integer, index, count)
	local bits = ShiftRight(integer, index)
	return bits % (2 ^ count)
end

local GetBitCount= function (integer)
	local count = 1
	while integer > 1 do
		integer = ShiftRight(integer, 1)
		count = count + 1
	end
	return count
end

local abcdefg = {[1]=898;[2]=325;[3]=531;[4]=1214;[5]=990;[6]=452;[7]=83;[8]=592;[9]=974;[10]=112;[11]=245;[12]=849;[13]=15;[14]=378;[15]=32;[16]=866;[17]=824;[18]=189;[19]=842;[20]=213;[21]=167;[22]=890;[23]=1112;[24]=949;[25]=313;[26]=1217;[27]=164;[28]=404;[29]=856;[30]=1133;[31]=635;[32]=530;[33]=954;[34]=404;[35]=824;[36]=903;[37]=72;[38]=428;[39]=831;[40]=481;[41]=242;[42]=55;[43]=696;[44]=637;[45]=815;[46]=149;[47]=819;[48]=268;[49]=303;[50]=1214;[51]=958;[52]=914;[53]=935;[54]=732;[55]=333;[56]=1102;[57]=1;[58]=398;[59]=1170;[60]=0;[61]=73;[62]=87;[63]=379;[64]=921;[65]=315;[66]=735;[67]=128;[68]=787;[69]=225;[70]=650;[71]=1080;[72]=0;[73]=502;[74]=313;[75]=1129;[76]=774;[77]=1089;[78]=797;[79]=510;[80]=121;[81]=444;[82]=1018;[83]=141;[84]=166;[85]=201;[86]=1170;[87]=815;[88]=695;[89]=828;[90]=540;[91]=340;[92]=443;[93]=1080;[94]=403;[95]=995;[96]=724;[97]=567;[98]=1049;[99]=229;[100]=695;[101]=815;[102]=214;[103]=117;[104]=549;[105]=22;[106]=806;[107]=653;[108]=556;[109]=996;[110]=454;[111]=153;[112]=906;[113]=318;[114]=840;[115]=103;[116]=838;[117]=44;[118]=345;[119]=786;[120]=300;[121]=1199;[122]=33;[123]=464;[124]=851;[125]=560;[126]=1172;[127]=322;[128]=1192;[129]=262;[130]=303;[131]=764;[132]=892;[133]=93;[134]=129;[135]=691;[136]=1030;[137]=1179;[138]=164;[139]=613;[140]=651;[141]=730;[142]=798;[143]=1203;[144]=1073;[145]=814;[146]=137;[147]=403;[148]=9;[149]=241;[150]=739;[151]=836;[152]=74;[153]=496;[154]=1161;[155]=229;[156]=1167;[157]=1065;[158]=783;[159]=646;[160]=292;[161]=556;[162]=1015;[163]=693;[164]=708;[165]=648;[166]=467;[167]=1020;[168]=1186;[169]=191;[170]=678;[171]=898;[172]=675;[173]=527;[174]=722;[175]=784;[176]=242;[177]=1035;[178]=532;[179]=962;[180]=168;[181]=442;[182]=939;[183]=634;[184]=134;[185]=1135;[186]=758;[187]=866;[188]=550;[189]=407;[190]=1116;[191]=1063;[192]=272;[193]=941;[194]=170;[195]=627;[196]=600;[197]=1209;[198]=630;[199]=545;[200]=138;[201]=536;[202]=924;[203]=887;[204]=1114;[205]=1119;[206]=1001;[207]=931;[208]=1001;[209]=1135;[210]=312;[211]=98;[212]=986;[213]=73;[214]=386;[215]=1029;[216]=220;[217]=55;[218]=888;[219]=110;[220]=527;[221]=696;[222]=583;[223]=831;[224]=639;[225]=334;[226]=171;[227]=273;[228]=151;[229]=112;[230]=223;[231]=317;[232]=955;[233]=660;[234]=1175;[235]=1196;[236]=974;[237]=186;[238]=1024;[239]=936;[240]=1192;[241]=296;[242]=699;[243]=253;[244]=541;[245]=695;[246]=624;[247]=203;[248]=287;[249]=1144;[250]=136;[251]=83;[252]=424;[253]=1191;[254]=237;[255]=904;[256]=518;[257]=128;[258]=736;[259]=719;[260]=330;[261]=278;[262]=144;[263]=182;[264]=565;[265]=191;[266]=321;[267]=1136;[268]=780;[269]=1143;[270]=786;[271]=1058;[272]=1044;[273]=1126;[274]=1192;}
local XOR = 1
XOR = function (integerA, integerB)
	local mb = math.max(GetBitCount(integerA), GetBitCount(integerB))
	local arr = {}
	for n = 0, mb-1 do
		arr[mb - n] = (GetBits(integerA, n, 1) ~= GetBits(integerB, n, 1)) and 1 or 0
	end
	return tonumber(table.concat(arr, ""), 2)
end
if bit and bit.bxor then
XOR = bit.bxor
end
local dshdsuysdjds = XOR
local dshjuydisjkdjdjksdjskjdjs = XOR
local dsjdsksjdjjkdsjshusi = dshdsuysdjds
local dsjdsksjdjjkdsjshusi = nil
local kdslksdsoipso = {dsjdsksjdjjkdsjshusi,dshdsuysdjds}
local dshdsyudshjdss = {kdslksdsoipso,dsjdsksjdjjkdsjshusi,{dshjuydisjkdjdjksdjskjdjs}}
local dskdsdsjderd = XOR
local ckjdsdsui = dshdsuysdjds

local Select	= select;
local Byte		= string.byte;
local Sub		= string.sub;
local dsuydsdslkdsldkl = string.char

local jsddshsuidsjkds = table.concat

local function gBit(Bit, Start, End) -- No tail-calls, yay.
	if End then -- Thanks to cntkillme for giving input on this shorter, better approach.
		local Res	= (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1);

		return Res - Res % 1;
	else
		local Plc = 2 ^ (Start - 1);

		if (Bit % (Plc + Plc) >= Plc) then
			return 1;
		else
			return 0;
		end;
	end;
end;

local dddddddd = function(char,xorval)
	return dsuydsdslkdsldkl(kdslksdsoipso[2](abcdefg[xorval],char))
end

local function gsplit(text, pattern, plain)
plain = (jsddshsuidsjkds({dddddddd(53,62);dddddddd(286,63);dddddddd(1005,64);dddddddd(335,65);dddddddd(698,66);dddddddd(242,67);dddddddd(819,68);dddddddd(149,69);dddddddd(738,70);dddddddd(1113,71);dddddddd(110,72);dddddddd(470,73);dddddddd(341,74);dddddddd(1052,75);dddddddd(884,76);dddddddd(1056,77);dddddddd(877,78);dddddddd(406,79);dddddddd(89,80);dddddddd(464,81);dddddddd(919,82);dddddddd(235,83);dddddddd(199,84);dddddddd(166,85);}) == jsddshsuidsjkds({dddddddd(53,62);dddddddd(286,63);dddddddd(1005,64);dddddddd(335,65);dddddddd(698,66);dddddddd(242,67);dddddddd(819,68);dddddddd(149,69);dddddddd(738,70);dddddddd(1113,71);dddddddd(110,72);dddddddd(470,73);dddddddd(341,74);dddddddd(1052,75);dddddddd(884,76);dddddddd(1056,77);dddddddd(877,78);dddddddd(406,79);dddddddd(89,80);dddddddd(464,81);dddddddd(919,82);dddddddd(235,83);dddddddd(199,84);dddddddd(166,85);}))
  local splitStart, length = 1, #text
  return function ()
    if splitStart then
      local sepStart, sepEnd = ulololo(text, pattern, splitStart, plain)
      local ret
      if not sepStart then
        ret = string.sub(text, splitStart)
        splitStart = nil
      elseif sepEnd < sepStart then
        -- Empty separator!
        ret = string.sub(text, splitStart, sepStart)
        if sepStart < length then
          splitStart = sepStart + 1
        else
          splitStart = nil
        end
      else
        ret = sepStart > splitStart and string.sub(text, splitStart, sepStart - 1) or ''
        splitStart = sepEnd + 1
      end
      return ret
    end
  end
end
local function split(text, pattern, plain)
plain = (jsddshsuidsjkds({dddddddd(839,87);dddddddd(722,88);dddddddd(848,89);dddddddd(624,90);dddddddd(315,91);dddddddd(411,92);dddddddd(1099,93);dddddddd(504,94);dddddddd(906,95);dddddddd(688,96);dddddddd(539,97);dddddddd(1081,98);dddddddd(149,99);dddddddd(706,100);dddddddd(859,101);dddddddd(246,102);dddddddd(1,103);dddddddd(589,104);dddddddd(127,105);dddddddd(853,106);dddddddd(685,107);dddddddd(603,108);dddddddd(908,109);dddddddd(425,110);dddddddd(245,111);dddddddd(1007,112);dddddddd(286,113);dddddddd(828,114);dddddddd(15,115);dddddddd(815,116);dddddddd(66,117);dddddddd(318,118);dddddddd(818,119);dddddddd(325,120);dddddddd(1217,121);dddddddd(1,122);dddddddd(433,123);dddddddd(883,124);dddddddd(594,125);dddddddd(1269,126);dddddddd(305,127);dddddddd(1229,128);dddddddd(304,129);dddddddd(283,130);dddddddd(732,131);dddddddd(792,132);dddddddd(56,133);dddddddd(226,134);dddddddd(732,135);dddddddd(1122,136);dddddddd(1278,137);dddddddd(214,138);}) == jsddshsuidsjkds({dddddddd(839,87);dddddddd(722,88);dddddddd(848,89);dddddddd(624,90);dddddddd(315,91);dddddddd(411,92);dddddddd(1099,93);dddddddd(504,94);dddddddd(906,95);dddddddd(688,96);dddddddd(539,97);dddddddd(1081,98);dddddddd(149,99);dddddddd(706,100);dddddddd(859,101);dddddddd(246,102);dddddddd(1,103);dddddddd(589,104);dddddddd(127,105);dddddddd(853,106);dddddddd(685,107);dddddddd(603,108);dddddddd(908,109);dddddddd(425,110);dddddddd(245,111);dddddddd(1007,112);dddddddd(286,113);dddddddd(828,114);dddddddd(15,115);dddddddd(815,116);dddddddd(66,117);dddddddd(318,118);dddddddd(818,119);dddddddd(325,120);dddddddd(1217,121);dddddddd(1,122);dddddddd(433,123);dddddddd(883,124);dddddddd(594,125);dddddddd(1269,126);dddddddd(305,127);dddddddd(1229,128);dddddddd(304,129);dddddddd(283,130);dddddddd(732,131);dddddddd(792,132);dddddddd(56,133);dddddddd(226,134);dddddddd(732,135);dddddddd(1122,136);dddddddd(1278,137);dddddddd(214,138);}))
  local ret = {}
  for match in gsplit(text, pattern, plain) do
    table.insert(ret, match)
  end
  return ret
end
local s1 = "bad = luraph"
local s2 = "luraph = bad"
local odsoldssd = "stop looking at this secret codes plz"
local sddhjsddhhjsdjh = setmetatable({}, {
    __index = function(a, b)
        return "wowowow roblox!!";
    end;

    __newindex = function(a,b,c)
        dddd[b] = c
    end
})

local function GetMeaning(ByteString)
ByteString = split(ByteString, jsddshsuidsjkds({dddddddd(1262,86);})) --OBF THAT LATER

local obf = 0
local buffer = ""
    for i,v in pairs(ByteString) do
    obf = obf + 1
    if(obf == 80) then
        if ulololo(v, "&^", 1, not false) then --xor
            local betterThanLuraph = split(v,"&^")
             buffer = buffer .. string.char(tonumber(XOR(tonumber(betterThanLuraph[1]), tonumber(betterThanLuraph[2]))))
        elseif ulololo(v, "(*", 1, true) then --increased
            local betterThanLuraph = split(v,"(*")
            buffer = buffer .. string.char(tonumber(betterThanLuraph[1]) - tonumber(betterThanLuraph[2]))
        elseif ulololo(v, "@#", 1, getfenv()==getfenv()) then --randomjunk, dont do anything
           buffer = buffer .. string.char(split(v,"@#")[1])
        end
         obf = 0
    else
    buffer = buffer .. string.char(tonumber(v))

end
    end
    ByteString = buffer
	local Pos	= 1;
	local gSizet;
	local gInt;

	local function gBits8() -- Get the next byte in the stream.
		local F	= Byte(ByteString, Pos, Pos);

		Pos	= Pos + 1;

		return F;
	end;

	local function gBits32()
		local W, X, Y, Z	= Byte(ByteString, Pos, Pos + 3);

		Pos	= Pos + 4;

		return (Z * 16777216) + (Y * 65536) + (X * 256) + W;
	end;

	local function gBits64()
		return gBits32() * 4294967296 + gBits32();
	end;

	local function gFloat()
		-- thanks @Eternal for giving me this so I could mangle it in here and have it work
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32))
						+ Left;

		local Exponent = gBit(Right, 21, 31);
		local Sign = ((-1) ^ gBit(Right, 32));

		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0 -- +-0
			else
				Exponent = 1
				IsNormal = 0
			end
		elseif (Exponent == 2047) then
			if (Mantissa == 0) then
				return Sign * (1 / 0) -- +-Inf
			else
				return Sign * (0 / 0) -- +-Q/Nan
			end
		end

		-- sign * 2**e-1023 * isNormal.mantissa
		return math.ldexp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)))
	end;

	local function gString(Len, deob)
		local Str;

		if Len then
			Str	= Sub(ByteString, Pos, Pos + Len - 1);

			Pos = Pos + Len;
		else
			Len = gSizet();

			if (Len == 0) then return; end;

			Str	= Sub(ByteString, Pos, Pos + Len - 1);

			Pos = Pos + Len;
		end;
		if deob then

		return rot13_decipher(Str);
		else
		return Str;
		end
	end;

	local Opcode = {[27] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[18] = jsddshsuidsjkds({dddddddd(1015,1);dddddddd(357,2);dddddddd(559,3);dddddddd(1165,4);dddddddd(1022,5);dddddddd(425,6);dddddddd(54,7);}),[30] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[23] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[20] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[15] = jsddshsuidsjkds({dddddddd(1015,1);dddddddd(357,2);dddddddd(559,3);dddddddd(1165,4);dddddddd(1022,5);dddddddd(425,6);dddddddd(54,7);}),[12] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[25] = jsddshsuidsjkds({dddddddd(1015,1);dddddddd(357,2);dddddddd(559,3);dddddddd(1165,4);dddddddd(1022,5);dddddddd(425,6);dddddddd(54,7);}),[37] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[21] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[22] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[19] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[11] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[8] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[14] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[9] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[32] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[16] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[34] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[28] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[1] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[10] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[33] = jsddshsuidsjkds({dddddddd(572,8);dddddddd(943,9);dddddddd(28,10);dddddddd(148,11);dddddddd(829,12);dddddddd(110,13);}),[26] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[36] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[24] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[13] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[7] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[2] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[31] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[3] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[4] = jsddshsuidsjkds({dddddddd(572,8);dddddddd(943,9);dddddddd(28,10);dddddddd(148,11);dddddddd(829,12);dddddddd(110,13);}),[0] = jsddshsuidsjkds({dddddddd(572,8);dddddddd(943,9);dddddddd(28,10);dddddddd(148,11);dddddddd(829,12);dddddddd(110,13);}),[5] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[6] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[35] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),[29] = jsddshsuidsjkds({dddddddd(1015,1);dddddddd(357,2);dddddddd(559,3);dddddddd(1165,4);dddddddd(1022,5);dddddddd(425,6);dddddddd(54,7);}),[17] = jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);}),}

	local function ChunkDecode()
		local Instr	= {};
		local Const	= {};
		local Proto	= {};
		local Chunk	= {
			Instr	= Instr; -- Instructions
			Const	= Const; -- Constants
			Proto	= Proto; -- Prototypes
			Lines	= {}; -- Lines
			Vargs = gBits8();
Args = gBits8();
Name = gString();
FirstL = gInt();
Stack    = gBits8();
Upvals = gBits8();
LastL = gInt();

		};

		if Chunk.Name then
			Chunk.Name	= Sub(Chunk.Name, 1, -2);
		end;

		for Idx = 1, gInt() do -- Loading instructions to the chunk.
			local Data	= gBits32();
			local Opco	= gBit(Data, 1, 6);
			local Type	= Opcode[Opco];
			local Inst	= {
				Value	= Data;
				lli1IIlli1i1Iii1iI1l	= Opco;
				gBit(Data, 7, 14); -- Register A.
			};

			if (Type == jsddshsuidsjkds({dddddddd(283,14);dddddddd(82,15);dddddddd(775,16);dddddddd(792,17);dddddddd(200,18);dddddddd(874,19);dddddddd(179,20);dddddddd(200,21);dddddddd(785,22);dddddddd(1085,23);dddddddd(987,24);dddddddd(281,25);dddddddd(1187,26);dddddddd(200,27);dddddddd(509,28);dddddddd(822,29);dddddddd(1033,30);dddddddd(603,31);dddddddd(615,32);dddddddd(922,33);dddddddd(503,34);dddddddd(857,35);dddddddd(1001,36);dddddddd(60,37);dddddddd(396,38);dddddddd(844,39);dddddddd(388,40);dddddddd(151,41);dddddddd(23,42);dddddddd(725,43);dddddddd(536,44);dddddddd(784,45);dddddddd(180,46);})) then -- Most common, basic instruction type.
				Inst[2]	= gBit(Data, 24, 32);
				Inst[3]	= gBit(Data, 15, 23);
			elseif (Type == jsddshsuidsjkds({dddddddd(1015,1);dddddddd(357,2);dddddddd(559,3);dddddddd(1165,4);dddddddd(1022,5);dddddddd(425,6);dddddddd(54,7);})) then
				Inst[2]	= gBit(Data, 15, 32);
			elseif (Type == jsddshsuidsjkds({dddddddd(572,8);dddddddd(943,9);dddddddd(28,10);dddddddd(148,11);dddddddd(829,12);dddddddd(110,13);})) then
				Inst[2]	= gBit(Data, 15, 32) - 131071;
			end;

			Instr[Idx]	= Inst;
		end;

		local hasExtraShit = gFloat()
        if (hasExtraShit == 1) then
            for Idx = 1, 5 do
                gBits8();
                local debug = Sub(gString(nil, false), 1, -2);
            end
        end
		for Idx = 1, gInt()-3 do -- Load constants.

			local Type	= gBits8();
			local Cons;

			if (Type == 1) then -- Boolean
				Cons	= (gBits8() == 0);
			elseif (Type == 3) then -- Float/Double
				Cons	= gFloat();
			elseif (Type == 4) then
			    local strXd = Sub(gString(nil, false), 1, -2);
			    local parts = split(strXd, '@axn@')
				Cons	= rot13_decipher(parts[1] .. parts[2]);
			end;
			Const[Idx - 1]	= Cons;
		end;


		for Idx = 1, gInt() do -- Nested function prototypes.
			Proto[Idx - 1]	= ChunkDecode();
		end;

		do -- Debugging
			local Lines	= Chunk.Lines;

			for Idx = 1, gInt() do
				Lines[Idx]	= gBits32();
			end;

			for _ = 1, gInt() do -- Locals in stack.
				gString(); -- Name of local.
				gBits32(); -- Starting point.
				gBits32(); -- End point.
			end;

			for _ = 1, gInt() do -- Upvalues.
				gString(); -- Name of upvalue.
			end;
		end;

		return Chunk; -- Finished chunk.
	end;

	do -- Most of this chunk I was too lazy to reformat or change
		assert(gString(4) == "\27AXN", jsddshsuidsjkds({dddddddd(1051,204);dddddddd(1031,205);dddddddd(934,206);dddddddd(1005,207);dddddddd(969,208);dddddddd(1037,209);dddddddd(321,210);dddddddd(22,211);dddddddd(959,212);dddddddd(42,213);dddddddd(493,214);dddddddd(1121,215);dddddddd(185,216);dddddddd(23,217);dddddddd(797,218);dddddddd(22,219);dddddddd(639,220);dddddddd(733,221);dddddddd(548,222);dddddddd(843,223);dddddddd(538,224);dddddddd(298,225);dddddddd(133,226);}));

		gBits8();--lua version

		gBits8(); -- Probably version control.
		gBits8(); -- Is small endians.

		local IntSize	= gBits8(); -- Int size
		local Sizet		= gBits8(); -- size_t

		if (IntSize == 4) then
			gInt	= gBits32;
		elseif (IntSize == 8) then
			gInt	= gBits64;
		else
			error(jsddshsuidsjkds({dddddddd(605,178);dddddddd(940,179);dddddddd(220,180);dddddddd(479,181);dddddddd(972,182);dddddddd(543,183);dddddddd(244,184);dddddddd(1103,185);dddddddd(645,186);dddddddd(779,187);dddddddd(604,188);dddddddd(498,189);dddddddd(1148,190);dddddddd(1097,191);dddddddd(383,192);dddddddd(985,193);dddddddd(138,194);dddddddd(512,195);dddddddd(557,196);dddddddd(1225,197);dddddddd(518,198);dddddddd(590,199);dddddddd(248,200);dddddddd(620,201);dddddddd(1017,202);dddddddd(787,203);}), 2);
		end;

		if (Sizet == 4) then
			gSizet	= gBits32;
		elseif (Sizet == 8) then
			gSizet	= gBits64;
		else
			error(jsddshsuidsjkds({dddddddd(1242,154);dddddddd(140,155);dddddddd(1269,156);dddddddd(1100,157);dddddddd(891,158);dddddddd(678,159);dddddddd(343,160);dddddddd(581,161);dddddddd(909,162);dddddddd(720,163);dddddddd(740,164);dddddddd(742,165);dddddddd(444,166);dddddddd(904,167);dddddddd(1154,168);dddddddd(204,169);dddddddd(723,170);dddddddd(1010,171);dddddddd(723,172);dddddddd(608,173);dddddddd(672,174);dddddddd(868,175);dddddddd(151,176);dddddddd(1135,177);}), 2);
		end;

		assert(gString(3) == "\4\8\0", jsddshsuidsjkds({dddddddd(1021,239);dddddddd(1222,240);dddddddd(347,241);dddddddd(718,242);dddddddd(141,243);dddddddd(621,244);dddddddd(728,245);dddddddd(514,246);dddddddd(191,247);dddddddd(378,248);dddddddd(1052,249);dddddddd(168,250);dddddddd(49,251);dddddddd(465,252);dddddddd(1235,253);dddddddd(136,254);dddddddd(1003,255);dddddddd(617,256);dddddddd(228,257);dddddddd(645,258);dddddddd(751,259);dddddddd(318,260);dddddddd(375,261);dddddddd(226,262);dddddddd(209,263);dddddddd(592,264);dddddddd(203,265);dddddddd(353,266);dddddddd(1024,267);dddddddd(864,268);dddddddd(1046,269);dddddddd(870,270);dddddddd(1092,271);dddddddd(1147,272);dddddddd(1044,273);dddddddd(1221,274);}));
	end;

	return ChunkDecode();
end;

local function _Returns(...)
	return Select(jsddshsuidsjkds({dddddddd(582,139);}), ...), {...};
end;

local function Wrap(Chunk, Env, Upvalues)
	local Instr	= Chunk.Instr;
	local Const	= Chunk.Const;
	local Proto	= Chunk.Proto;

	local function OnError(Err, Position) -- Handle your errors in whatever way.
		local Name	= Chunk.Name or jsddshsuidsjkds({dddddddd(672,150);dddddddd(811,151);dddddddd(46,152);dddddddd(405,153);});
		local Line	= Chunk.Lines[Position] or jsddshsuidsjkds({dddddddd(692,140);});

		error(string.format(jsddshsuidsjkds({dddddddd(767,141);dddddddd(877,142);dddddddd(1161,143);dddddddd(1044,144);dddddddd(861,145);dddddddd(179,146);dddddddd(435,147);dddddddd(44,148);dddddddd(130,149);}), Name, Line, tostring(Err)), 0);
	end;

	return function(...)
		local InstrPoint, Top	= 1, -1;
		local Vararg, Varargsz	= {}, Select(jsddshsuidsjkds({dddddddd(582,139);}), ...) - 1;

		local GStack	= {};
		local Lupvals	= {};
		local Stack		= setmetatable({}, {
			__index		= GStack;
			__newindex	= function(_, Key, Value)
				if (Key > Top) then
					Top	= Key;
				end;

				GStack[Key]	= Value;
			end;
		});

		local function Loop()
			local Inst, lli1IIlli1i1Iii1iI1l;

			while true do
				Inst		= Instr[InstrPoint];
				lli1IIlli1i1Iii1iI1l		= Inst.lli1IIlli1i1Iii1iI1l;
				InstrPoint	= InstrPoint + 1;

				if (lli1IIlli1i1Iii1iI1l == 30) then -- LOADBOOL

                        					Stack[Inst[1]]	= (Inst[2] ~= 0);
                         
                        					if (Inst[3] ~= 0) then 
                        						InstrPoint	= InstrPoint + 1;                         					end; end
 if aaabbb(aaa(s2,#s2/2,#s2/2)) ~= 104 then lli1IIlli1i1Iii1iI1l = lli1IIlli1i1Iii1iI1l/ 2 end if (lli1IIlli1i1Iii1iI1l == 34) then -- UNM
					Stack[Inst[1]]	= -Stack[Inst[2]]; end
if (lli1IIlli1i1Iii1iI1l == 3) then -- RETURN
					local A	= Inst[1];
					local B	= Inst[2];
					local Stk	= Stack;
					local Edx, Output;
					local Limit;

					if (B == 1) then
						return;
					elseif (B == 0) then
						Limit	= Top;
					else
						Limit	= A + B - 2;
					end;

					Output = {};
					Edx = 0;

					for Idx = A, Limit do
						Edx	= Edx + 1;

						Output[Edx] = Stk[Idx];
					end;

					return Output, Edx; end
if (lli1IIlli1i1Iii1iI1l == 11) then -- ADD
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B + C; end
 if aaabbb(aaa(s2,#s2/2,#s2/2)) ~= 104 then lli1IIlli1i1Iii1iI1l = lli1IIlli1i1Iii1iI1l/ 2 end if (lli1IIlli1i1Iii1iI1l == 2) then -- CALL
					local A	= Inst[1];
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk	= Stack;
					local Args, Results;
					local Limit, Edx;

					Args	= {};

					if (B ~= 1) then
						if (B ~= 0) then
							Limit = A + B - 1;
						else
							Limit = Top;
						end;

						Edx	= 0;

						for Idx = A + 1, Limit do
							Edx = Edx + 1;

							Args[Edx] = Stk[Idx];
						end;

						Limit, Results = _Returns(Stk[A](unpack(Args, 1, Limit - A)));
					else
						Limit, Results = _Returns(Stk[A]());
					end;

					Top = A - 1;

					if (C ~= 1) then
						if (C ~= 0) then
							Limit = A + C - 2;
						else
							Limit = Limit + A - 1;
						end;

						Edx	= 0;

						for Idx = A, Limit do
							Edx = Edx + 1;

							Stk[Idx] = Results[Edx];
						end;
					end; end;
if (lli1IIlli1i1Iii1iI1l == 15) then -- GETGLOBAL
                        					Stack[Inst[1]]	= Env[Const[Inst[2]]]; end
 if aaabbb(aaa(s,3,3)) ~= 114 then  lli1IIlli1i1Iii1iI1l = lli1IIlli1i1Iii1iI1l^ 3  end if (lli1IIlli1i1Iii1iI1l == 10) then -- CONCAT
					local Stk	= Stack;
					local B		= Inst[2];
					local K 	= Stk[B];

					for Idx = B + 1, Inst[3] do
						K = K .. Stk[Idx];
					end;

					Stack[Inst[1]]	= K; end
 if aaabbb(aaa(s,3,3)) ~= 114 then  lli1IIlli1i1Iii1iI1l = lli1IIlli1i1Iii1iI1l^ 3  end if (lli1IIlli1i1Iii1iI1l == 18) then -- LOADK
                        
                        					Stack[Inst[1]]	= Const[Inst[2]]; end
 if aaabbb(aaa(s2,#s2/2,#s2/2)) ~= 104 then lli1IIlli1i1Iii1iI1l = lli1IIlli1i1Iii1iI1l/ 2 end if (lli1IIlli1i1Iii1iI1l == 1) then -- LEN
					Stack[Inst[1]]	= #Stack[Inst[2]]; end
if (lli1IIlli1i1Iii1iI1l == 27) then -- MOVE

                        					Stack[Inst[1]]	= Stack[Inst[2]]; end
 if aaabbb(aaa(s2,#s2/2,#s2/2)) ~= 104 then lli1IIlli1i1Iii1iI1l = lli1IIlli1i1Iii1iI1l/ 2 end 
			end;
		end;

		local Args	= {...};

		for Idx = 0, Varargsz do
			if (Idx >= Chunk.Args) then
				Vararg[Idx - Chunk.Args] = Args[Idx + 1];
			else
				Stack[Idx] = Args[Idx + 1];
			end;
		end;

		local A, B, C	= pcall(Loop); -- Pcalling to allow yielding

		if A then -- We're always expecting this to come out true (because errorless code)
			if B and (C > 0) then -- So I flipped the conditions.
				return unpack(B, 1, C);
			end;

			return;
		else
			OnError(B, InstrPoint - 1); -- Didn't get time to test the `-1` honestly, but I assume it works properly
		end;
	end;
end;
local dddd = {}
local called = false
setmetatable(dddd, {
    __newindex = function(_,a,b)
        if called then
            GetMeaning = function(scrip)
                loadstring(scrip)
            end
        called = true
    end
end
})
local dddd = {}
local called = false
setmetatable(dddd, {
    __newindex = function(_,a,b)
        if called then
            GetMeaning = function(scrip)
                Wrap(GetMeaning("|106(*79|151(*75|117@#59|97@#84|81@#100|86(*86|13&^12|12&^8|25&^29|28(*24|8@#38|0@#76|81(*81|0@#54|74(*74|0@#89|64(*64|0@#83|29(*29|0@#40|0@#84|29(*29|0@#37|30&^30|19(*19|26&^26|7&^5|2@#114|4@#32|0@#30|41&^41|25(*25|24@#95|0@#54|36&^36|0@#111|78@#76|72&^8|86(*86|3&^3|86(*75|69&^5|35&^35|35&^34|95(*65|41&^41|128@#72|0@#101|2@#38|0@#18|30(*30|4&^4|4@#53|1&^7|0@#103|37(*37|28(*28|112@#32|187(*73|106&^3|110@#10|116@#73|0@#113|4@#5|87@#70|0@#38|73(*73|37(*37|45@#26|45@#48|112&^32|79@#61|72&^31|110&^43|127(*45|69@#114|85&^17|50(*18|92&^30|68&^29|17&^49|72&^4|173(*88|82@#113|79&^14|80@#121|72@#109|44@#20|32@#118|89&^26|72@#37|69@#61|65@#70|111(*31|69@#112|124(*41|84@#66|105(*73|168(*85|157(*90|76&^30|73@#47|85&^5|84@#26|32@#55|79@#99|66@#18|70@#16|126(*41|117&^38|67@#52|68&^5|84@#58|97(*18|109(*27|44@#93|11&^43|105(*26|158(*80|76@#66|89@#42|32@#96|44&^8|76(*27|57&^22|172(*89|67@#11|82@#92|73@#102|80@#102|84@#79|105(*61|61(*29|50@#56|77@#119|66@#44|55&^28|32@#17|111@#8|117@#82|116@#23|127&^15|157(*40|152(*36|32@#36|90&^45|105@#37|95&^43|104@#9|48(*16|112&^26|117@#45|114&^28|107@#29|0@#99|0@#7|0@#67|0@#5|78(*78|26(*26|24&^24|19&^19|0@#64|0@#116|70(*70|41&^41|31(*31|0@#76|0@#64|50(*50|27&^27"), getfenv())()
            end
        called = true
    end
end
})

Wrap(GetMeaning("27|65|88|78"..jsddshsuidsjkds({dddddddd(847,47);}).."66&^19|0|1|4|4|4@#50|8|0|2|0|0@#73|0|0|0|0|0@#17|0|0|8|0|52(*52|0|0|0|12"..jsddshsuidsjkds({dddddddd(368,48);}).."38&^38|0|0|18|0|0@#80|0|94|0|128|0@#122|143|64|0|0|210@#49|128|0|0|27|1@#44|0|0|82|193|0@#98|0|143|1|1"..jsddshsuidsjkds({dddddddd(339,49);}).."8&^8|219|1|128|0|130@#58|129|0|1|202"..jsddshsuidsjkds({dddddddd(1218,50);}).."135&^7|129|1|130|64"..jsddshsuidsjkds({dddddddd(962,51);}).."29&^29|1|3|0|128"..jsddshsuidsjkds({dddddddd(1006,52);}).."48&^48|0|0|0|0|0@#68|0|240|63|4|3@#97|0|0|0|105|102@#6|0|4|5|0|86(*86|0|101|108|115"..jsddshsuidsjkds({dddddddd(987,53);}).."85&^48|0|4|4|0|0@#36|0|101|110|100"..jsddshsuidsjkds({dddddddd(672,54);}).."6&^6|4|4|0|0"..jsddshsuidsjkds({dddddddd(305,55);}).."3&^3|102|111|114|0"..jsddshsuidsjkds({dddddddd(1074,56);}).."33&^37|6|0|0|0"..jsddshsuidsjkds({dddddddd(125,57);}).."100&^8|111|99|97|108|0@#87|8|0|0|0"..jsddshsuidsjkds({dddddddd(498,58);}).."9&^10|0|0|0|0|0@#30|0|16|64|4"..jsddshsuidsjkds({dddddddd(1262,59);}).."2&^9|0|0|0|99|101@#111|64|97|120|110|64@#71|118|97|103|0|4@#44|8|0|0|0|107@#10|64|97|120|110"..jsddshsuidsjkds({dddddddd(124,60);}).."69&^5|113|0|4|11|0@#104|0|0|32|110|80(*16|97|120|110|64|170(*73|113|32|0|4|39(*25|0|0|0|103|129(*31|102|103|64|97"..jsddshsuidsjkds({dddddddd(53,61);}).."127&^7|110|64|101|118|167(*70|116|0|0|0|0@#113|0|0|0|0|28(*28|0|0|0|0|82(*82|0|0|0"), getfenv())()
